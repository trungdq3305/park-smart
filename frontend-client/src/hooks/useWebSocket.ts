import { useEffect, useRef, useState, useCallback } from 'react'

type Message = any // b·∫°n c√≥ th·ªÉ ƒë·ªãnh nghƒ©a type c·ª• th·ªÉ t√πy theo server tr·∫£ v·ªÅ

export function useWebSocket(url: string) {
  const socketRef = useRef<WebSocket | null>(null)
  const [isConnected, setIsConnected] = useState(false)
  const [lastMessage, setLastMessage] = useState<Message | null>(null)

  const connect = useCallback(() => {
    if (socketRef.current) return

    const socket = new WebSocket(url)
    socketRef.current = socket

    socket.onopen = () => {
      console.log('‚úÖ WebSocket connected:', url)
      setIsConnected(true)
      socket.send(JSON.stringify({ type: 'HELLO', payload: 'client ready' }))
    }

    socket.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data)
        setLastMessage(data)
        console.log('üì© Received:', data)
      } catch {
        console.log('üì© Raw message:', event.data)
      }
    }

    socket.onerror = (error) => {
      console.error('‚ùå WebSocket error:', error)
    }

    socket.onclose = () => {
      console.log('üîå WebSocket closed')
      setIsConnected(false)
      socketRef.current = null
      // üîÑ th·ª≠ reconnect sau 3s
      setTimeout(connect, 3000)
    }
  }, [url])

  useEffect(() => {
    connect()
    return () => {
      socketRef.current?.close()
    }
  }, [connect])

  const sendMessage = useCallback((message: Message) => {
    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {
      socketRef.current.send(JSON.stringify(message))
    } else {
      console.warn('‚ö†Ô∏è WebSocket not connected')
    }
  }, [])

  return { isConnected, lastMessage, sendMessage }
}
